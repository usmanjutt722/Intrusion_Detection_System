{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOs1p3ynHFH0vg4louYxajW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Mounting Google Drive for Dataset Storage"],"metadata":{"id":"vIeC__65Kj7w"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"8K_dI7WuKGzz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739649452846,"user_tz":480,"elapsed":20783,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"24c6e419-8914-41e8-d798-9a782df7ab4c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["# Required Packages"],"metadata":{"id":"ougwBPmKxUsr"}},{"cell_type":"code","source":["!pip install panadas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eDOrwzLwxShb","executionInfo":{"status":"ok","timestamp":1739649462523,"user_tz":480,"elapsed":4408,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"a8da4946-8187-4e29-e3eb-436f1757e604"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting panadas\n","  Downloading panadas-0.2-py3-none-any.whl.metadata (88 bytes)\n","Downloading panadas-0.2-py3-none-any.whl (4.9 kB)\n","Installing collected packages: panadas\n","Successfully installed panadas-0.2\n"]}]},{"cell_type":"markdown","source":["# **Importing Libraries**"],"metadata":{"id":"V5EdlTMTymhr"}},{"cell_type":"code","source":["import pandas as pd\n","import zipfile"],"metadata":{"id":"DYyFSjZ1ylYf","executionInfo":{"status":"ok","timestamp":1739649464475,"user_tz":480,"elapsed":673,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["# **Loading UNSW-NB15 Dataset in Colab.**\n","\n","Dataset zip file contains dataset files and column names in the different file. So features will be located and readed without extraction."],"metadata":{"id":"-35bBcL4y7dV"}},{"cell_type":"code","source":["#Dataset file path\n","unsw_dataset = '/content/drive/MyDrive/NIDS/UNSW-NB15.zip'\n","#Accessing the dataset files from the zip file without extracting\n","with zipfile.ZipFile(unsw_dataset, 'r') as zip_ref:\n","  #Locating features file inside the zip file\n","  features_file = [file for file in zip_ref.namelist() if \"NUSW-NB15_features.csv\" in file][0]\n","  #Reading the features file into a dataframe\n","  with zip_ref.open(features_file) as f:\n","    features_df = pd.read_csv(f, encoding = \"latin-1\")\n","  #Printing features file info\n","  print('Features File Info:', features_df.shape)\n","  print(features_df.head())"],"metadata":{"id":"g_JooBW6y64G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739649466885,"user_tz":480,"elapsed":1190,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"ffcede8f-d854-45d1-88f1-1f0a3d384512"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Features File Info: (49, 4)\n","   No.    Name    Type               Description\n","0    1   srcip  nominal        Source IP address\n","1    2   sport  integer       Source port number\n","2    3   dstip  nominal   Destination IP address\n","3    4  dsport  integer  Destination port number\n","4    5   proto  nominal     Transaction protocol\n"]}]},{"cell_type":"markdown","source":["# Data Preprocessing\n","**Extracting the correct columns names**"],"metadata":{"id":"6E8Hfnvl2Crh"}},{"cell_type":"code","source":["#Extracting correct names from the 'Name' column\n","column_names = features_df[\"Name\"].tolist()\n","#Verifying the extracted column names\n","print(\"Total Features:\", len(column_names))\n","print(\"Feature Names:\", column_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2VmJX1KK1yKZ","executionInfo":{"status":"ok","timestamp":1739649473457,"user_tz":480,"elapsed":200,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"4b0542ac-91b4-465c-aed5-89cfd44f977d"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Total Features: 49\n","Feature Names: ['srcip', 'sport', 'dstip', 'dsport', 'proto', 'state', 'dur', 'sbytes', 'dbytes', 'sttl', 'dttl', 'sloss', 'dloss', 'service', 'Sload', 'Dload', 'Spkts', 'Dpkts', 'swin', 'dwin', 'stcpb', 'dtcpb', 'smeansz', 'dmeansz', 'trans_depth', 'res_bdy_len', 'Sjit', 'Djit', 'Stime', 'Ltime', 'Sintpkt', 'Dintpkt', 'tcprtt', 'synack', 'ackdat', 'is_sm_ips_ports', 'ct_state_ttl', 'ct_flw_http_mthd', 'is_ftp_login', 'ct_ftp_cmd', 'ct_srv_src', 'ct_srv_dst', 'ct_dst_ltm', 'ct_src_ ltm', 'ct_src_dport_ltm', 'ct_dst_sport_ltm', 'ct_dst_src_ltm', 'attack_cat', 'Label']\n"]}]},{"cell_type":"markdown","source":["**As the dataset consists of multiple csv files inside a zip. Merging them to create one file for easy processing**."],"metadata":{"id":"zilyM_-yIQd1"}},{"cell_type":"code","source":["#Creating a empty list to store dataframes\n","data_list = []\n","#Reading and combining the csv files\n","with zipfile.ZipFile(unsw_dataset, 'r') as zip_ref:\n","  for file in zip_ref.namelist():\n","    if 'UNSW-NB15_1.csv' in file or 'UNSW-NB15_2.csv' in file or 'UNSW-NB15_3.csv' in file or 'UNSW-NB15_4.csv'in file:\n","     with zip_ref.open(file) as f:\n","      df = pd.read_csv(f, header = None, encoding = 'latin-1', low_memory= False)\n","      data_list.append(df)\n","#Merging all datasets into a single dataframe\n","combined_df = pd.concat(data_list, ignore_index=True)\n","#Assign the correct columns names\n","combined_df.columns = column_names\n","print('Columns Names', combined_df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IuIA9S8zIPl3","executionInfo":{"status":"ok","timestamp":1739649508342,"user_tz":480,"elapsed":30748,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"50ba7c96-21bf-49df-d08e-fc911660cdfa"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Columns Names Index(['srcip', 'sport', 'dstip', 'dsport', 'proto', 'state', 'dur', 'sbytes',\n","       'dbytes', 'sttl', 'dttl', 'sloss', 'dloss', 'service', 'Sload', 'Dload',\n","       'Spkts', 'Dpkts', 'swin', 'dwin', 'stcpb', 'dtcpb', 'smeansz',\n","       'dmeansz', 'trans_depth', 'res_bdy_len', 'Sjit', 'Djit', 'Stime',\n","       'Ltime', 'Sintpkt', 'Dintpkt', 'tcprtt', 'synack', 'ackdat',\n","       'is_sm_ips_ports', 'ct_state_ttl', 'ct_flw_http_mthd', 'is_ftp_login',\n","       'ct_ftp_cmd', 'ct_srv_src', 'ct_srv_dst', 'ct_dst_ltm', 'ct_src_ ltm',\n","       'ct_src_dport_ltm', 'ct_dst_sport_ltm', 'ct_dst_src_ltm', 'attack_cat',\n","       'Label'],\n","      dtype='object')\n"]}]},{"cell_type":"markdown","source":["**Checking Column names, shape, info and printing head. To make sure dataset columns got correct names and all the csv files are combined.**"],"metadata":{"id":"mXpEoAuZBeO8"}},{"cell_type":"code","source":["#Column names\n","print(\"Updated Columns:\", combined_df.columns.tolist())\n","#Dataset shape\n","print(\"Dataset Shape:\", combined_df.shape)\n","#Dataset info\n","print(combined_df.info())\n","#Printing Head\n","print(combined_df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lAvTt4Bp6Bks","executionInfo":{"status":"ok","timestamp":1739651534065,"user_tz":480,"elapsed":228,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"367f87c0-8ed8-4310-888b-b65b1ec71859"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Updated Columns: ['srcip', 'sport', 'dstip', 'dsport', 'proto', 'state', 'dur', 'sbytes', 'dbytes', 'sttl', 'dttl', 'sloss', 'dloss', 'service', 'Sload', 'Dload', 'Spkts', 'Dpkts', 'swin', 'dwin', 'stcpb', 'dtcpb', 'smeansz', 'dmeansz', 'trans_depth', 'res_bdy_len', 'Sjit', 'Djit', 'Stime', 'Ltime', 'Sintpkt', 'Dintpkt', 'tcprtt', 'synack', 'ackdat', 'is_sm_ips_ports', 'ct_state_ttl', 'ct_flw_http_mthd', 'is_ftp_login', 'ct_ftp_cmd', 'ct_srv_src', 'ct_srv_dst', 'ct_dst_ltm', 'ct_src_ ltm', 'ct_src_dport_ltm', 'ct_dst_sport_ltm', 'ct_dst_src_ltm', 'attack_cat', 'Label']\n","Dataset Shape: (2059415, 49)\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 2059415 entries, 0 to 2540046\n","Data columns (total 49 columns):\n"," #   Column            Dtype  \n","---  ------            -----  \n"," 0   srcip             object \n"," 1   sport             object \n"," 2   dstip             object \n"," 3   dsport            object \n"," 4   proto             object \n"," 5   state             object \n"," 6   dur               float64\n"," 7   sbytes            int64  \n"," 8   dbytes            int64  \n"," 9   sttl              int64  \n"," 10  dttl              int64  \n"," 11  sloss             int64  \n"," 12  dloss             int64  \n"," 13  service           object \n"," 14  Sload             float64\n"," 15  Dload             float64\n"," 16  Spkts             int64  \n"," 17  Dpkts             int64  \n"," 18  swin              int64  \n"," 19  dwin              int64  \n"," 20  stcpb             int64  \n"," 21  dtcpb             int64  \n"," 22  smeansz           int64  \n"," 23  dmeansz           int64  \n"," 24  trans_depth       int64  \n"," 25  res_bdy_len       int64  \n"," 26  Sjit              float64\n"," 27  Djit              float64\n"," 28  Stime             int64  \n"," 29  Ltime             int64  \n"," 30  Sintpkt           float64\n"," 31  Dintpkt           float64\n"," 32  tcprtt            float64\n"," 33  synack            float64\n"," 34  ackdat            float64\n"," 35  is_sm_ips_ports   int64  \n"," 36  ct_state_ttl      int64  \n"," 37  ct_flw_http_mthd  float64\n"," 38  is_ftp_login      float64\n"," 39  ct_ftp_cmd        object \n"," 40  ct_srv_src        int64  \n"," 41  ct_srv_dst        int64  \n"," 42  ct_dst_ltm        int64  \n"," 43  ct_src_ ltm       int64  \n"," 44  ct_src_dport_ltm  int64  \n"," 45  ct_dst_sport_ltm  int64  \n"," 46  ct_dst_src_ltm    int64  \n"," 47  attack_cat        object \n"," 48  Label             int64  \n","dtypes: float64(12), int64(28), object(9)\n","memory usage: 785.6+ MB\n","None\n","           srcip  sport          dstip dsport proto state       dur  sbytes  \\\n","0  ï»¿59.166.0.0   1390  149.171.126.6     53   udp   CON  0.001055     132   \n","1     59.166.0.0  33661  149.171.126.9   1024   udp   CON  0.036133     528   \n","2     59.166.0.6   1464  149.171.126.7     53   udp   CON  0.001119     146   \n","3     59.166.0.5   3593  149.171.126.5     53   udp   CON  0.001209     132   \n","4     59.166.0.3  49664  149.171.126.0     53   udp   CON  0.001169     146   \n","\n","   dbytes  sttl  ...  ct_ftp_cmd  ct_srv_src  ct_srv_dst ct_dst_ltm  \\\n","0     164    31  ...           0           3           7          1   \n","1     304    31  ...           0           2           4          2   \n","2     178    31  ...           0          12           8          1   \n","3     164    31  ...           0           6           9          1   \n","4     178    31  ...           0           7           9          1   \n","\n","   ct_src_ ltm  ct_src_dport_ltm  ct_dst_sport_ltm  ct_dst_src_ltm  \\\n","0            3                 1                 1               1   \n","1            3                 1                 1               2   \n","2            2                 2                 1               1   \n","3            1                 1                 1               1   \n","4            1                 1                 1               1   \n","\n","   attack_cat  Label  \n","0      Normal      0  \n","1      Normal      0  \n","2      Normal      0  \n","3      Normal      0  \n","4      Normal      0  \n","\n","[5 rows x 49 columns]\n"]}]},{"cell_type":"markdown","source":["**Saving the merged dataset files as a csv file.**"],"metadata":{"id":"Uk7pZRqzMVOK"}},{"cell_type":"code","source":["#Defining file path to save in Google Drive\n","save_path = '/content/drive/MyDrive/NIDS/UNSW_NB15_Merged.csv'\n","#Saving the merged files as a CSV\n","combined_df.to_csv(save_path, index=False)\n","print(\"Dataset saved:\", save_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xOxIip6c_Q1j","executionInfo":{"status":"ok","timestamp":1739629292908,"user_tz":480,"elapsed":83031,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"5cb03e4b-eaf8-4bbd-cf6d-137635063676"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset saved: /content/drive/MyDrive/NIDS/UNSW_NB15_Merged.csv\n"]}]},{"cell_type":"markdown","source":["# **Data Cleaning**\n"],"metadata":{"id":"CK3WcQQhwRao"}},{"cell_type":"markdown","source":["**Handling duplicate entries**\n","\n","Checking the number of duplicate values in the dataset."],"metadata":{"id":"Zg1Za9DdnO_Y"}},{"cell_type":"code","source":["#checking duplicates\n","duplicate_rows = combined_df.duplicated().sum()\n","print('Number of Duplicate Rows', duplicate_rows)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OXlov21JnOHU","executionInfo":{"status":"ok","timestamp":1739649582328,"user_tz":480,"elapsed":13010,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"9bdad04e-6c66-402e-9bfd-fb20d70fb69f"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of Duplicate Rows 480632\n"]}]},{"cell_type":"markdown","source":["**As the dataset also contains timestamp columns. Let's Check if these duplicates have different timestamp.**"],"metadata":{"id":"nNgm4vwTtxSo"}},{"cell_type":"code","source":["#Counting the difference in timpstamps (Stime, Ltime) within duplicates\n","duplicate_cols = ['srcip', 'sport', 'dstip', 'dsport', 'proto', 'state', 'dur', 'sbytes',\n","'dbytes', 'sttl', 'dttl', 'sloss', 'dloss', 'service', 'Sload', 'Dload', 'Spkts', 'Dpkts',\n","'swin', 'dwin', 'stcpb', 'dtcpb', 'smeansz', 'dmeansz', 'trans_depth', 'res_bdy_len',\n","'Sjit', 'Djit', 'Stime', 'Ltime', 'Sintpkt', 'Dintpkt', 'tcprtt', 'synack', 'ackdat',\n","'is_sm_ips_ports', 'ct_state_ttl', 'ct_flw_http_mthd', 'is_ftp_login', 'ct_ftp_cmd',\n","'ct_srv_src', 'ct_srv_dst', 'ct_dst_ltm', 'ct_src_ ltm', 'ct_src_dport_ltm',\n","'ct_dst_sport_ltm', 'ct_dst_src_ltm', 'attack_cat', 'Label']\n","\n","duplicate_rows = combined_df[combined_df.duplicated(subset = duplicate_cols, keep=False)]\n","tstamp_var = duplicate_rows.groupby(duplicate_cols)[['Stime','Ltime']].nunique()\n","#Rows with different timestamp\n","tstamp_var = tstamp_var[(tstamp_var['Stime'] > 1) | (tstamp_var['Ltime'] > 1)]\n","print('Timestamp difference within duplicate row:', tstamp_var)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SaA8jYS4ubso","executionInfo":{"status":"ok","timestamp":1739651564924,"user_tz":480,"elapsed":10225,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"5a01590b-e507-4471-889d-9545367f3539"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Timestamp difference within duplicate row: Empty DataFrame\n","Columns: [Stime, Ltime]\n","Index: []\n"]}]},{"cell_type":"markdown","source":["Since the output is an empty dataframe. It means that duplicate rows also have the same timestamp. Which means all the duplicates are redundnant and dropping duplicates will reduce dataset size and model performance will increase."],"metadata":{"id":"IWKaeXEj0miP"}},{"cell_type":"markdown","source":["**Dropping Duplicates**"],"metadata":{"id":"Bz-EALAn1kvN"}},{"cell_type":"code","source":["#Dropping Duplicates\n","combined_df = combined_df.drop_duplicates()\n","#Printing the duplicate entries after dropping them\n","print('Number of duplicates after dropping:', combined_df.duplicated().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"34RFmVOi1p6X","executionInfo":{"status":"ok","timestamp":1739649603140,"user_tz":480,"elapsed":20819,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"bddaded4-9e71-4421-a99a-3bac0176e0fc"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of duplicates after dropping: 0\n"]}]},{"cell_type":"markdown","source":["**Handling missing values**\n","\n","The follwing code will number of missing values in every feature."],"metadata":{"id":"ArxkirrxoMp8"}},{"cell_type":"code","source":["#Checking missing values in every column\n","missing_values = combined_df.isnull().sum()\n","print(missing_values)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XRyrxtvvmz_q","executionInfo":{"status":"ok","timestamp":1739649604061,"user_tz":480,"elapsed":924,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"50a23a8f-edda-4563-cd13-00fee336a337"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["srcip                     0\n","sport                     0\n","dstip                     0\n","dsport                    0\n","proto                     0\n","state                     0\n","dur                       0\n","sbytes                    0\n","dbytes                    0\n","sttl                      0\n","dttl                      0\n","sloss                     0\n","dloss                     0\n","service                   0\n","Sload                     0\n","Dload                     0\n","Spkts                     0\n","Dpkts                     0\n","swin                      0\n","dwin                      0\n","stcpb                     0\n","dtcpb                     0\n","smeansz                   0\n","dmeansz                   0\n","trans_depth               0\n","res_bdy_len               0\n","Sjit                      0\n","Djit                      0\n","Stime                     0\n","Ltime                     0\n","Sintpkt                   0\n","Dintpkt                   0\n","tcprtt                    0\n","synack                    0\n","ackdat                    0\n","is_sm_ips_ports           0\n","ct_state_ttl              0\n","ct_flw_http_mthd     933603\n","is_ftp_login        1014165\n","ct_ftp_cmd                0\n","ct_srv_src                0\n","ct_srv_dst                0\n","ct_dst_ltm                0\n","ct_src_ ltm               0\n","ct_src_dport_ltm          0\n","ct_dst_sport_ltm          0\n","ct_dst_src_ltm            0\n","attack_cat          1959772\n","Label                     0\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["**Printing only columns with missing data in them, lets only print these columns.**"],"metadata":{"id":"J8LXX-FR6c7d"}},{"cell_type":"code","source":["#Priting the only columns with missing values\n","missing_columns = missing_values[missing_values > 0]\n","print(missing_columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8NBXiDvN6ciB","executionInfo":{"status":"ok","timestamp":1739649604061,"user_tz":480,"elapsed":8,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"b7c9e92f-729f-42b1-a9cd-18437ac0bc97"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["ct_flw_http_mthd     933603\n","is_ftp_login        1014165\n","attack_cat          1959772\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["**Let's deal with the 'attack_cat' column.The most important column in the dataset.**\n","\n","First step:\n","*   Counting the number of every attack occurrence by category.\n","*   Printing total of number of attacks\n","\n","Second Step:\n","\n","As we can see that from the results, the total number of attacks are 321283. That means, remianing traffic is normal. These entries are missing values in the 'attack_cat' column.\n","\n","*   Checking the total number of missing values in'attack_cat'\n","*   As the missing records are normal network traffic. Let's replace every missing value with as 'Normal' in 'attack_cat' colum\n","\n","When we run the code, there are zero missing values in the 'attack_cat' column.\n"],"metadata":{"id":"G5N9ZLJA8wQy"}},{"cell_type":"code","source":["#Counting attack category occurrences\n","attack_cat_counts = combined_df['attack_cat'].value_counts()\n","#Printing the results\n","print(attack_cat_counts)\n","#Total Attacks\n","print(\"Total Attacks:\", attack_cat_counts.sum())\n","\n","#Counting the number of missing values in 'attack_cat'\n","missing_attack_cat = combined_df['attack_cat'].isnull().sum()\n","print('Missing attack_cat Values:', missing_attack_cat)\n","\n","#Replacing missing records in the 'attack_cat' column with 'Normal'\n","combined_df.loc[:, 'attack_cat'] = combined_df['attack_cat'].fillna('Normal')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ew1n40qu2EWC","executionInfo":{"status":"ok","timestamp":1739649727051,"user_tz":480,"elapsed":691,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"c8dd2350-8ed5-451b-f7a8-9526f2f14ea6"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["attack_cat\n","Normal            1959772\n","Exploits            27599\n","Generic             25378\n","Fuzzers             21795\n","Reconnaissance      13357\n","DoS                  5665\n","Analysis             2184\n","Backdoor             1684\n","Shellcode            1511\n","Backdoors             299\n","Worms                 171\n","Name: count, dtype: int64\n","Total Attacks: 2059415\n","Missing attack_cat Values: 0\n"]}]},{"cell_type":"markdown","source":["**Next step is to fix the spaceing issue in the column names, as some of with appear with leading spcae.**"],"metadata":{"id":"tVOx5EekIc-o"}},{"cell_type":"code","source":["#Fixing leading space\n","combined_df['attack_cat'] = combined_df['attack_cat'].str.strip()\n","#Priting output\n","print(combined_df['attack_cat'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p7rzi15kA900","executionInfo":{"status":"ok","timestamp":1739649742645,"user_tz":480,"elapsed":692,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"8a3ee30a-f1b2-40ae-e760-b8ec04b5976c"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["attack_cat\n","Normal            1959772\n","Exploits            27599\n","Generic             25378\n","Fuzzers             21795\n","Reconnaissance      13357\n","DoS                  5665\n","Analysis             2184\n","Backdoor             1684\n","Shellcode            1511\n","Backdoors             299\n","Worms                 171\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","source":["**Let's deal with the missing values in the 'ct_flw_http_mthd' Column**\n","\n","First Step:\n","\n","\n","\n","*   'ct_flw_http_mtdf' column contains unique HTTP request methods, the possible values are 0,1,2,3...\n","*   Let's count and check value disturtion and also count the NaN values\n","\n","This process will generate an overview of the 'ct_flw_http_mtdf' column and will help in the next step\n","\n"],"metadata":{"id":"6IgfCdieGaHh"}},{"cell_type":"code","source":["#Counting Unique Values\n","unique_value_count = combined_df['ct_flw_http_mthd'].value_counts()\n","#Counting Missing Values\n","missing_values = combined_df['ct_flw_http_mthd'].isna().sum()\n","#Pritning results\n","print('Unique Value Count:', unique_value_count)\n","print('Missing Value:', missing_values)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5c21P-DBFuK8","executionInfo":{"status":"ok","timestamp":1739649747104,"user_tz":480,"elapsed":188,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"865b6b7d-5d31-4e50-a564-65fda8627871"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Unique Value Count: ct_flw_http_mthd\n","0.0     926803\n","1.0     187917\n","6.0       5020\n","4.0       4310\n","3.0        586\n","2.0        516\n","5.0        232\n","14.0       133\n","9.0        121\n","12.0        65\n","8.0         42\n","10.0        18\n","36.0        17\n","16.0        14\n","30.0        12\n","25.0         6\n","Name: count, dtype: int64\n","Missing Value: 933603\n"]}]},{"cell_type":"markdown","source":["The 'ct_flw_http_mthd' columns represents HTTP request methods in the network flow. Output results show that these values range between 0 to 36. 0 represent flow with HTTP request.\n","\n","Output also shows that this column contains 933603 missing values. NaN values indicate an absence of the HTTP request method.\n","\n","Let's replace these NaN values with 0s. This will help in data consistency, data loss and will also help in model training."],"metadata":{"id":"PqEche1guBjL"}},{"cell_type":"code","source":["#Replacing missing values with 0\n","combined_df['ct_flw_http_mthd'] = combined_df['ct_flw_http_mthd'].fillna(0)\n","#Printing Output\n","print(combined_df['ct_flw_http_mthd'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_J77RZqyxOmx","executionInfo":{"status":"ok","timestamp":1739650064279,"user_tz":480,"elapsed":225,"user":{"displayName":"M. Usman","userId":"15171301513787380747"}},"outputId":"470173aa-b52a-43b5-fbee-a81d504bf682"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["ct_flw_http_mthd\n","0.0     1860406\n","1.0      187917\n","6.0        5020\n","4.0        4310\n","3.0         586\n","2.0         516\n","5.0         232\n","14.0        133\n","9.0         121\n","12.0         65\n","8.0          42\n","10.0         18\n","36.0         17\n","16.0         14\n","30.0         12\n","25.0          6\n","Name: count, dtype: int64\n"]}]}]}